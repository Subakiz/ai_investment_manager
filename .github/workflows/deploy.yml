name: Deploy AI Investment Manager

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: alphauser
          POSTGRES_PASSWORD: alphapass
          POSTGRES_DB: alphagen
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Create .env file for testing
      run: |
        cp .env.template .env
        echo "DB_HOST=localhost" >> .env
    
    - name: Run setup validation tests
      run: python test_setup.py
    
    - name: Run pytest
      run: |
        # Run any existing pytest tests
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping pytest"
        fi
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: alphagen
        DB_USER: alphauser
        DB_PASSWORD: alphapass

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      run: |
        echo "ðŸš€ Deployment step placeholder"
        echo "In a real deployment, this would:"
        echo "1. SSH to production server"
        echo "2. Pull the new Docker image"
        echo "3. Run: docker-compose pull"
        echo "4. Run: docker-compose up -d"
        echo "5. Run health checks"
        echo ""
        echo "Example commands for actual deployment:"
        echo "ssh user@server 'cd /app && docker-compose pull && docker-compose up -d'"
        echo "ssh user@server 'docker system prune -f'"
        
    # Uncomment and configure for actual deployment:
    # - name: Deploy to server via SSH
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.SSH_KEY }}
    #     script: |
    #       cd /path/to/app
    #       docker-compose pull
    #       docker-compose up -d
    #       docker system prune -f